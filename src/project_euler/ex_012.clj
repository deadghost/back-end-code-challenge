(ns project-euler.ex-012
  (:require
   [clojure.math.numeric-tower :as math]
   [project-euler.ex-005 :refer [factorize]]))

;; The sequence of triangle numbers is generated by adding the natural numbers.
;; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
;; ten terms would be:

;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

;; Let us list the factors of the first seven triangle numbers:

    ;;  1: 1
    ;;  3: 1,3
    ;;  6: 1,2,3,6
    ;; 10: 1,2,5,10
    ;; 15: 1,3,5,15
    ;; 21: 1,3,7,21
    ;; 28: 1,2,4,7,14,28

;; We can see that 28 is the first triangle number to have over five divisors.
;; What is the value of the first triangle number to have over five hundred
;; divisors?

(def triangle-numbers
  "Lazy infinite sequence of triangle numbers."
  (lazy-cat [1 3] (map + (rest triangle-numbers)
                       (iterate inc 3))))

(defn number-of-divisors [n]
  (->> (map inc (vals (frequencies (factorize n))))
       (apply *)))

(defn take-until
  "Returns a lazy sequence of successive items from coll until
  (pred item) returns true, including that item. pred must be
  free of side-effects."
  [pred coll]
  (lazy-seq
   (when-let [s (seq coll)]
     (if (pred (first s))
       (cons (first s) nil)
       (cons (first s) (take-until pred (rest s)))))))

(last (take-until #(> (last %) 500) (map #(vector % (number-of-divisors %))
                                         triangle-numbers)))
