(ns project-euler.ex-002)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Even Fibonacci numbers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Solution 1: Corecursion
;;==============================================================================
;; fib-seq will hold onto the head and not garbage collect so it's a bad idea
;; to use unless we plan on using fib-seq frequently.
;;
;; Time complexity: O(n)
;;   We visit every integer once.
;; Space complexity: O(n)
;;   We store all integers before adding. This can be reduced to O(1).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def fib-seq
  "Lazy infinite fib sequence using corecursion.
  Realize using the take function."
  (lazy-cat [1 1] (map + fib-seq (rest fib-seq))))

(defn solution-1 []
  (->> (take-while #(<= % 4000000) fib-seq)
       (filter even?)
       (apply +)))
